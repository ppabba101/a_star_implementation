Initialize start_node
Initialize end_node

Add start_node to open_set
Set start_node.s_score = 0
Set start_node.g_score = distance(start_node, end_node)

while open_set is not empty:
    priority_node = node in open_set with the lowest (s_score + g_score)
    
    if priority_node == end_node:
        reconstruct_path(end_node)
        break
    else:
        move priority_node from open_set to closed_set
        neighbors = get_neighbors(priority_node)
        
        for neighbor in neighbors:
            if neighbor is in closed_set:
                continue
            
            tentative_s_score = priority_node.s_score + distance(priority_node, neighbor)
            
            if neighbor not in open_set:
                neighbor.s_score = tentative_s_score
                neighbor.g_score = distance(neighbor, end_node)
                add neighbor to open_set
            else if tentative_s_score < neighbor.s_score:
                neighbor.s_score = tentative_s_score
                neighbor.g_score = distance(neighbor, end_node)
                update neighbor in open_set